<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on AWei’s Kernel Tour</title>
    <link>https://cnjslw.github.io/posts/</link>
    <description>Recent content in Posts on AWei’s Kernel Tour</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 Jun 2023 16:44:34 +0800</lastBuildDate><atom:link href="https://cnjslw.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First Post</title>
      <link>https://cnjslw.github.io/posts/first-post/</link>
      <pubDate>Thu, 08 Jun 2023 16:44:34 +0800</pubDate>
      
      <guid>https://cnjslw.github.io/posts/first-post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>【模板与泛型编程01】函数模板</title>
      <link>https://cnjslw.github.io/posts/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Wed, 08 Jun 2022 15:45:34 +0800</pubDate>
      
      <guid>https://cnjslw.github.io/posts/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</guid>
      <description>一、定义函数模板 1、基本范例 1 2 3 4 5 6 7 template &amp;lt;typename T&amp;gt; int compare(const T &amp;amp;v1 , const T &amp;amp;v2) { if(v1 &amp;lt; v2) return -1; if(v2 &amp;lt; v1) return 1; return 0; } 模板定义以关键字 template开始，后接模板形参表，模板形参表是用尖括号&amp;lt;&amp;gt;括住的一个或多个模板形参的列表，用逗号分隔，不能为空。
模板程序应该尽量减少对实参类型的要求。 函数模板和类模板成员函数的定义通常放在头文件中([[C++ 模板的定义是否只能放在头文件中？]])。 2、模板参数 2.1 类型参数 类型参数前必须使用关键字class或者typename，这两个关键字含义相同，可以互换使用。旧的程序只能使用class。但是有些时候，class并不合适
2.2 默认参数 1 2 3 4 5 6 7 8 9 10 template&amp;lt;typename T , typename F = FunType&amp;gt; void TestFunc(T i , T j , F funcpoint=mf) { cout&amp;lt;&amp;lt;funcpoint(i,j)&amp;lt;&amp;lt;endl; } int main() { TestFunc(15,16); return 0; } 调用testfunc()函数的时候，不用指定第3个实参，因为第3个参数有默认值。要注意默认参数的写法：针对当前的范例，类型模板参数F给了默认值，函数的形参也给了默认值。默认模板参数F是一个函数指针类型（FuncType），函数参数funcpoint = mf中的mf是函数名，代表函数首地址</description>
    </item>
    
  </channel>
</rss>
